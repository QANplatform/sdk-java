/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import com.qanplatform.invoker.ApiException;
import com.qanplatform.model.ErrorModel;
import com.qanplatform.model.InputCall;
import com.qanplatform.model.InputEstimateGas;
import com.qanplatform.model.InputFeeHistory;
import com.qanplatform.model.InputGetLogs;
import com.qanplatform.model.InputGetProof;
import com.qanplatform.model.InputGetStorageAt;
import com.qanplatform.model.InputNewFilter;
import com.qanplatform.model.InputSendRawTransaction;
import com.qanplatform.model.OutputBlockNumber;
import com.qanplatform.model.OutputCall;
import com.qanplatform.model.OutputChainId;
import com.qanplatform.model.OutputEstimateGas;
import com.qanplatform.model.OutputFeeHistory;
import com.qanplatform.model.OutputGasPrice;
import com.qanplatform.model.OutputGetBalance;
import com.qanplatform.model.OutputGetBlockByHash;
import com.qanplatform.model.OutputGetBlockByNumber;
import com.qanplatform.model.OutputGetBlockReceipts;
import com.qanplatform.model.OutputGetBlockTransactionCountByHash;
import com.qanplatform.model.OutputGetBlockTransactionCountByNumber;
import com.qanplatform.model.OutputGetCode;
import com.qanplatform.model.OutputGetFilterChanges;
import com.qanplatform.model.OutputGetFilterLogs;
import com.qanplatform.model.OutputGetLogs;
import com.qanplatform.model.OutputGetProof;
import com.qanplatform.model.OutputGetStorageAt;
import com.qanplatform.model.OutputGetTransactionByBlockHashAndIndex;
import com.qanplatform.model.OutputGetTransactionByBlockNumberAndIndex;
import com.qanplatform.model.OutputGetTransactionByHash;
import com.qanplatform.model.OutputGetTransactionCount;
import com.qanplatform.model.OutputGetTransactionReceipt;
import com.qanplatform.model.OutputMaxPriorityFeePerGas;
import com.qanplatform.model.OutputNewBlockFilter;
import com.qanplatform.model.OutputNewFilter;
import com.qanplatform.model.OutputNewPendingTransactionFilter;
import com.qanplatform.model.OutputSendRawTransaction;
import com.qanplatform.model.OutputSyncing;
import com.qanplatform.model.OutputUninstallFilter;
import com.qanplatform.model.OutputXlinkValid;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QanApi
 */
@Disabled
public class QanApiTest {

    private final QanApi api = new QanApi();

    /**
     * Returns the latest block number of the blockchain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanBlockNumberTest() throws ApiException {
        OutputBlockNumber response = api.qanBlockNumber();
        // TODO: test validations
    }

    /**
     * Executes a new message call immediately without creating a transaction on the block chain.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanCallTest() throws ApiException {
        InputCall inputCall = null;
        OutputCall response = api.qanCall(inputCall);
        // TODO: test validations
    }

    /**
     * Returns the current network/chain ID, used to sign replay-protected transaction introduced in EIP-155.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanChainIdTest() throws ApiException {
        OutputChainId response = api.qanChainId();
        // TODO: test validations
    }

    /**
     * Returns an estimation of gas for a given transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanEstimateGasTest() throws ApiException {
        InputEstimateGas inputEstimateGas = null;
        OutputEstimateGas response = api.qanEstimateGas(inputEstimateGas);
        // TODO: test validations
    }

    /**
     * Returns the collection of historical gas information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanFeeHistoryTest() throws ApiException {
        InputFeeHistory inputFeeHistory = null;
        OutputFeeHistory response = api.qanFeeHistory(inputFeeHistory);
        // TODO: test validations
    }

    /**
     * Returns the current gas price on the network in wei.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGasPriceTest() throws ApiException {
        OutputGasPrice response = api.qanGasPrice();
        // TODO: test validations
    }

    /**
     * Returns the balance of the account of given address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBalanceTest() throws ApiException {
        String address = null;
        String blockNumber = null;
        OutputGetBalance response = api.qanGetBalance(address, blockNumber);
        // TODO: test validations
    }

    /**
     * Returns information of the block matching the given block hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBlockByHashTest() throws ApiException {
        String hash = null;
        Boolean transactionDetailFlag = null;
        OutputGetBlockByHash response = api.qanGetBlockByHash(hash, transactionDetailFlag);
        // TODO: test validations
    }

    /**
     * Returns information of the block matching the given block number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBlockByNumberTest() throws ApiException {
        String blockNumber = null;
        Boolean transactionDetailFlag = null;
        OutputGetBlockByNumber response = api.qanGetBlockByNumber(blockNumber, transactionDetailFlag);
        // TODO: test validations
    }

    /**
     * Returns all transaction receipts for a given block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBlockReceiptsTest() throws ApiException {
        String blockNumber = null;
        OutputGetBlockReceipts response = api.qanGetBlockReceipts(blockNumber);
        // TODO: test validations
    }

    /**
     * Returns the number of transactions for the block matching the given block hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBlockTransactionCountByHashTest() throws ApiException {
        String hash = null;
        OutputGetBlockTransactionCountByHash response = api.qanGetBlockTransactionCountByHash(hash);
        // TODO: test validations
    }

    /**
     * Returns the number of transactions for the block matching the given block number.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetBlockTransactionCountByNumberTest() throws ApiException {
        String blockNumber = null;
        OutputGetBlockTransactionCountByNumber response = api.qanGetBlockTransactionCountByNumber(blockNumber);
        // TODO: test validations
    }

    /**
     * Returns the compiled bytecode of a smart contract.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetCodeTest() throws ApiException {
        String address = null;
        String blockNumber = null;
        OutputGetCode response = api.qanGetCode(address, blockNumber);
        // TODO: test validations
    }

    /**
     * Polling method for a filter, which returns an array of events that have occurred since the last poll.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetFilterChangesTest() throws ApiException {
        String filterId = null;
        OutputGetFilterChanges response = api.qanGetFilterChanges(filterId);
        // TODO: test validations
    }

    /**
     * Returns an array of all logs matching filter with given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetFilterLogsTest() throws ApiException {
        String id = null;
        OutputGetFilterLogs response = api.qanGetFilterLogs(id);
        // TODO: test validations
    }

    /**
     * Returns an array of all logs matching a given filter object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetLogsTest() throws ApiException {
        InputGetLogs inputGetLogs = null;
        OutputGetLogs response = api.qanGetLogs(inputGetLogs);
        // TODO: test validations
    }

    /**
     * Returns the account and storage values of the specified account including the Merkle-proof.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetProofTest() throws ApiException {
        InputGetProof inputGetProof = null;
        OutputGetProof response = api.qanGetProof(inputGetProof);
        // TODO: test validations
    }

    /**
     * Returns the value from a storage position at a given address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetStorageAtTest() throws ApiException {
        InputGetStorageAt inputGetStorageAt = null;
        OutputGetStorageAt response = api.qanGetStorageAt(inputGetStorageAt);
        // TODO: test validations
    }

    /**
     * Returns information about a transaction given a blockhash and transaction index position.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetTransactionByBlockHashAndIndexTest() throws ApiException {
        String blockHash = null;
        String index = null;
        OutputGetTransactionByBlockHashAndIndex response = api.qanGetTransactionByBlockHashAndIndex(blockHash, index);
        // TODO: test validations
    }

    /**
     * Returns information about a transaction given a block number and transaction index position.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetTransactionByBlockNumberAndIndexTest() throws ApiException {
        String blockNumber = null;
        String index = null;
        OutputGetTransactionByBlockNumberAndIndex response = api.qanGetTransactionByBlockNumberAndIndex(blockNumber, index);
        // TODO: test validations
    }

    /**
     * Returns the information about a transaction from a transaction hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetTransactionByHashTest() throws ApiException {
        String hash = null;
        OutputGetTransactionByHash response = api.qanGetTransactionByHash(hash);
        // TODO: test validations
    }

    /**
     * Returns the number of transactions sent from an address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetTransactionCountTest() throws ApiException {
        String address = null;
        String blockNumber = null;
        OutputGetTransactionCount response = api.qanGetTransactionCount(address, blockNumber);
        // TODO: test validations
    }

    /**
     * Returns the receipt of a transaction by transaction hash.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanGetTransactionReceiptTest() throws ApiException {
        String hash = null;
        OutputGetTransactionReceipt response = api.qanGetTransactionReceipt(hash);
        // TODO: test validations
    }

    /**
     * Get the priority fee needed to be included in a block.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanMaxPriorityFeePerGasTest() throws ApiException {
        OutputMaxPriorityFeePerGas response = api.qanMaxPriorityFeePerGas();
        // TODO: test validations
    }

    /**
     * Creates a filter in the node, to notify when a new block arrives.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanNewBlockFilterTest() throws ApiException {
        OutputNewBlockFilter response = api.qanNewBlockFilter();
        // TODO: test validations
    }

    /**
     * Creates a filter object, based on filter options, to notify when the state changes (logs).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanNewFilterTest() throws ApiException {
        InputNewFilter inputNewFilter = null;
        OutputNewFilter response = api.qanNewFilter(inputNewFilter);
        // TODO: test validations
    }

    /**
     * Creates a filter in the node to notify when new pending transactions arrive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanNewPendingTransactionFilterTest() throws ApiException {
        OutputNewPendingTransactionFilter response = api.qanNewPendingTransactionFilter();
        // TODO: test validations
    }

    /**
     * Creates new message call transaction or a contract creation for signed transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanSendRawTransactionTest() throws ApiException {
        InputSendRawTransaction inputSendRawTransaction = null;
        OutputSendRawTransaction response = api.qanSendRawTransaction(inputSendRawTransaction);
        // TODO: test validations
    }

    /**
     * Returns an object with the sync status of the node if the node is out-of-sync and is syncing. Returns null when the node is already in sync.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanSyncingTest() throws ApiException {
        OutputSyncing response = api.qanSyncing();
        // TODO: test validations
    }

    /**
     * Uninstalls a filter with the given filter id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanUninstallFilterTest() throws ApiException {
        String filterId = null;
        OutputUninstallFilter response = api.qanUninstallFilter(filterId);
        // TODO: test validations
    }

    /**
     * Returns the xlink validity time of the account of given address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qanXlinkValidTest() throws ApiException {
        String address = null;
        OutputXlinkValid response = api.qanXlinkValid(address);
        // TODO: test validations
    }

}
