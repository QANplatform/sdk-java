/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.qanplatform.model.ResponseLog;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * ResponseTransactionReceipt
 */

public class ResponseTransactionReceipt {
  public static final String SERIALIZED_NAME_BLOCK_HASH = "BlockHash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "BlockNumber";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private String blockNumber;

  public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "ContractAddress";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
  private String contractAddress;

  public static final String SERIALIZED_NAME_CUMULATIVE_GAS_USED = "CumulativeGasUsed";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_GAS_USED)
  private String cumulativeGasUsed;

  public static final String SERIALIZED_NAME_EFFECTIVE_GAS_PRICE = "EffectiveGasPrice";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_GAS_PRICE)
  private String effectiveGasPrice;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_GAS_USED = "GasUsed";
  @SerializedName(SERIALIZED_NAME_GAS_USED)
  private String gasUsed;

  public static final String SERIALIZED_NAME_LOGS = "Logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<ResponseLog> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGS_BLOOM = "LogsBloom";
  @SerializedName(SERIALIZED_NAME_LOGS_BLOOM)
  private String logsBloom;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TRANSACTION_HASH = "TransactionHash";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_HASH)
  private String transactionHash;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX = "TransactionIndex";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX)
  private String transactionIndex;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ResponseTransactionReceipt() {
  }

  public ResponseTransactionReceipt blockHash(String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  /**
   * The hash of the block. null when pending
   * @return blockHash
   */
  @javax.annotation.Nullable
  public String getBlockHash() {
    return blockHash;
  }

  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public ResponseTransactionReceipt blockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

  /**
   * Get blockNumber
   * @return blockNumber
   */
  @javax.annotation.Nullable
  public String getBlockNumber() {
    return blockNumber;
  }

  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }


  public ResponseTransactionReceipt contractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
    return this;
  }

  /**
   * The contract address created if the transaction was a contract creation, otherwise null
   * @return contractAddress
   */
  @javax.annotation.Nullable
  public String getContractAddress() {
    return contractAddress;
  }

  public void setContractAddress(String contractAddress) {
    this.contractAddress = contractAddress;
  }


  public ResponseTransactionReceipt cumulativeGasUsed(String cumulativeGasUsed) {
    this.cumulativeGasUsed = cumulativeGasUsed;
    return this;
  }

  /**
   * The total amount of gas used when this transaction was executed in the block
   * @return cumulativeGasUsed
   */
  @javax.annotation.Nullable
  public String getCumulativeGasUsed() {
    return cumulativeGasUsed;
  }

  public void setCumulativeGasUsed(String cumulativeGasUsed) {
    this.cumulativeGasUsed = cumulativeGasUsed;
  }


  public ResponseTransactionReceipt effectiveGasPrice(String effectiveGasPrice) {
    this.effectiveGasPrice = effectiveGasPrice;
    return this;
  }

  /**
   * The actual value per gas deducted from the sender account
   * @return effectiveGasPrice
   */
  @javax.annotation.Nullable
  public String getEffectiveGasPrice() {
    return effectiveGasPrice;
  }

  public void setEffectiveGasPrice(String effectiveGasPrice) {
    this.effectiveGasPrice = effectiveGasPrice;
  }


  public ResponseTransactionReceipt from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The address of the sender
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public ResponseTransactionReceipt gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

  /**
   * The amount of gas used by this specific transaction alone
   * @return gasUsed
   */
  @javax.annotation.Nullable
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }


  public ResponseTransactionReceipt logs(List<ResponseLog> logs) {
    this.logs = logs;
    return this;
  }

  public ResponseTransactionReceipt addLogsItem(ResponseLog logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * An array of log objects that generated this transaction
   * @return logs
   */
  @javax.annotation.Nullable
  public List<ResponseLog> getLogs() {
    return logs;
  }

  public void setLogs(List<ResponseLog> logs) {
    this.logs = logs;
  }


  public ResponseTransactionReceipt logsBloom(String logsBloom) {
    this.logsBloom = logsBloom;
    return this;
  }

  /**
   * The bloom filter for light clients to quickly retrieve related logs
   * @return logsBloom
   */
  @javax.annotation.Nullable
  public String getLogsBloom() {
    return logsBloom;
  }

  public void setLogsBloom(String logsBloom) {
    this.logsBloom = logsBloom;
  }


  public ResponseTransactionReceipt status(String status) {
    this.status = status;
    return this;
  }

  /**
   * It is either 1 (success) or 0 (failure) encoded as a decimal
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public ResponseTransactionReceipt to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The address of the receiver. null when it&#39;s a contract creation transaction
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public ResponseTransactionReceipt transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

  /**
   * The hash of the transaction
   * @return transactionHash
   */
  @javax.annotation.Nullable
  public String getTransactionHash() {
    return transactionHash;
  }

  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }


  public ResponseTransactionReceipt transactionIndex(String transactionIndex) {
    this.transactionIndex = transactionIndex;
    return this;
  }

  /**
   * An index of the transaction in the block
   * @return transactionIndex
   */
  @javax.annotation.Nullable
  public String getTransactionIndex() {
    return transactionIndex;
  }

  public void setTransactionIndex(String transactionIndex) {
    this.transactionIndex = transactionIndex;
  }


  public ResponseTransactionReceipt type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The value type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseTransactionReceipt responseTransactionReceipt = (ResponseTransactionReceipt) o;
    return Objects.equals(this.blockHash, responseTransactionReceipt.blockHash) &&
        Objects.equals(this.blockNumber, responseTransactionReceipt.blockNumber) &&
        Objects.equals(this.contractAddress, responseTransactionReceipt.contractAddress) &&
        Objects.equals(this.cumulativeGasUsed, responseTransactionReceipt.cumulativeGasUsed) &&
        Objects.equals(this.effectiveGasPrice, responseTransactionReceipt.effectiveGasPrice) &&
        Objects.equals(this.from, responseTransactionReceipt.from) &&
        Objects.equals(this.gasUsed, responseTransactionReceipt.gasUsed) &&
        Objects.equals(this.logs, responseTransactionReceipt.logs) &&
        Objects.equals(this.logsBloom, responseTransactionReceipt.logsBloom) &&
        Objects.equals(this.status, responseTransactionReceipt.status) &&
        Objects.equals(this.to, responseTransactionReceipt.to) &&
        Objects.equals(this.transactionHash, responseTransactionReceipt.transactionHash) &&
        Objects.equals(this.transactionIndex, responseTransactionReceipt.transactionIndex) &&
        Objects.equals(this.type, responseTransactionReceipt.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockHash, blockNumber, contractAddress, cumulativeGasUsed, effectiveGasPrice, from, gasUsed, logs, logsBloom, status, to, transactionHash, transactionIndex, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseTransactionReceipt {\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
    sb.append("    cumulativeGasUsed: ").append(toIndentedString(cumulativeGasUsed)).append("\n");
    sb.append("    effectiveGasPrice: ").append(toIndentedString(effectiveGasPrice)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    logsBloom: ").append(toIndentedString(logsBloom)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BlockHash");
    openapiFields.add("BlockNumber");
    openapiFields.add("ContractAddress");
    openapiFields.add("CumulativeGasUsed");
    openapiFields.add("EffectiveGasPrice");
    openapiFields.add("From");
    openapiFields.add("GasUsed");
    openapiFields.add("Logs");
    openapiFields.add("LogsBloom");
    openapiFields.add("Status");
    openapiFields.add("To");
    openapiFields.add("TransactionHash");
    openapiFields.add("TransactionIndex");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseTransactionReceipt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseTransactionReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseTransactionReceipt is not found in the empty JSON string", ResponseTransactionReceipt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseTransactionReceipt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseTransactionReceipt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BlockHash") != null && !jsonObj.get("BlockHash").isJsonNull()) && !jsonObj.get("BlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockHash").toString()));
      }
      if ((jsonObj.get("BlockNumber") != null && !jsonObj.get("BlockNumber").isJsonNull()) && !jsonObj.get("BlockNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockNumber").toString()));
      }
      if ((jsonObj.get("ContractAddress") != null && !jsonObj.get("ContractAddress").isJsonNull()) && !jsonObj.get("ContractAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContractAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContractAddress").toString()));
      }
      if ((jsonObj.get("CumulativeGasUsed") != null && !jsonObj.get("CumulativeGasUsed").isJsonNull()) && !jsonObj.get("CumulativeGasUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CumulativeGasUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CumulativeGasUsed").toString()));
      }
      if ((jsonObj.get("EffectiveGasPrice") != null && !jsonObj.get("EffectiveGasPrice").isJsonNull()) && !jsonObj.get("EffectiveGasPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EffectiveGasPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EffectiveGasPrice").toString()));
      }
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if ((jsonObj.get("GasUsed") != null && !jsonObj.get("GasUsed").isJsonNull()) && !jsonObj.get("GasUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GasUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GasUsed").toString()));
      }
      if (jsonObj.get("Logs") != null && !jsonObj.get("Logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("Logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Logs` to be an array in the JSON string but got `%s`", jsonObj.get("Logs").toString()));
          }

          // validate the optional field `Logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            ResponseLog.validateJsonElement(jsonArraylogs.get(i));
          };
        }
      }
      if ((jsonObj.get("LogsBloom") != null && !jsonObj.get("LogsBloom").isJsonNull()) && !jsonObj.get("LogsBloom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogsBloom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogsBloom").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) && !jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      if ((jsonObj.get("TransactionHash") != null && !jsonObj.get("TransactionHash").isJsonNull()) && !jsonObj.get("TransactionHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionHash").toString()));
      }
      if ((jsonObj.get("TransactionIndex") != null && !jsonObj.get("TransactionIndex").isJsonNull()) && !jsonObj.get("TransactionIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndex").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseTransactionReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseTransactionReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseTransactionReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseTransactionReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseTransactionReceipt>() {
           @Override
           public void write(JsonWriter out, ResponseTransactionReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseTransactionReceipt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseTransactionReceipt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseTransactionReceipt
   * @throws IOException if the JSON string is invalid with respect to ResponseTransactionReceipt
   */
  public static ResponseTransactionReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseTransactionReceipt.class);
  }

  /**
   * Convert an instance of ResponseTransactionReceipt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

