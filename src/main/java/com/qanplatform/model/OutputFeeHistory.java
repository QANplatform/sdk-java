/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * OutputFeeHistory
 */

public class OutputFeeHistory {
  public static final String SERIALIZED_NAME_$_SCHEMA = "$schema";
  @SerializedName(SERIALIZED_NAME_$_SCHEMA)
  private URI $schema;

  public static final String SERIALIZED_NAME_BASE_FEE_PER_GAS = "BaseFeePerGas";
  @SerializedName(SERIALIZED_NAME_BASE_FEE_PER_GAS)
  private List<String> baseFeePerGas = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAS_USED_RATIO = "GasUsedRatio";
  @SerializedName(SERIALIZED_NAME_GAS_USED_RATIO)
  private List<Double> gasUsedRatio = new ArrayList<>();

  public static final String SERIALIZED_NAME_OLDEST_BLOCK = "OldestBlock";
  @SerializedName(SERIALIZED_NAME_OLDEST_BLOCK)
  private String oldestBlock;

  public static final String SERIALIZED_NAME_REWARD = "Reward";
  @SerializedName(SERIALIZED_NAME_REWARD)
  private List<List<String>> reward = new ArrayList<>();

  public OutputFeeHistory() {
  }

  public OutputFeeHistory(
     URI $schema
  ) {
    this();
    this.$schema = $schema;
  }

  /**
   * A URL to the JSON Schema for this object.
   * @return $schema
   */
  @javax.annotation.Nullable
  public URI get$Schema() {
    return $schema;
  }



  public OutputFeeHistory baseFeePerGas(List<String> baseFeePerGas) {
    this.baseFeePerGas = baseFeePerGas;
    return this;
  }

  public OutputFeeHistory addBaseFeePerGasItem(String baseFeePerGasItem) {
    if (this.baseFeePerGas == null) {
      this.baseFeePerGas = new ArrayList<>();
    }
    this.baseFeePerGas.add(baseFeePerGasItem);
    return this;
  }

  /**
   * An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks
   * @return baseFeePerGas
   */
  @javax.annotation.Nonnull
  public List<String> getBaseFeePerGas() {
    return baseFeePerGas;
  }

  public void setBaseFeePerGas(List<String> baseFeePerGas) {
    this.baseFeePerGas = baseFeePerGas;
  }


  public OutputFeeHistory gasUsedRatio(List<Double> gasUsedRatio) {
    this.gasUsedRatio = gasUsedRatio;
    return this;
  }

  public OutputFeeHistory addGasUsedRatioItem(Double gasUsedRatioItem) {
    if (this.gasUsedRatio == null) {
      this.gasUsedRatio = new ArrayList<>();
    }
    this.gasUsedRatio.add(gasUsedRatioItem);
    return this;
  }

  /**
   * An array of block gas used ratios. These are calculated as the ratio of gasUsed and gasLimit
   * @return gasUsedRatio
   */
  @javax.annotation.Nonnull
  public List<Double> getGasUsedRatio() {
    return gasUsedRatio;
  }

  public void setGasUsedRatio(List<Double> gasUsedRatio) {
    this.gasUsedRatio = gasUsedRatio;
  }


  public OutputFeeHistory oldestBlock(String oldestBlock) {
    this.oldestBlock = oldestBlock;
    return this;
  }

  /**
   * The lowest number block of the returned range encoded in decimal format
   * @return oldestBlock
   */
  @javax.annotation.Nonnull
  public String getOldestBlock() {
    return oldestBlock;
  }

  public void setOldestBlock(String oldestBlock) {
    this.oldestBlock = oldestBlock;
  }


  public OutputFeeHistory reward(List<List<String>> reward) {
    this.reward = reward;
    return this;
  }

  public OutputFeeHistory addRewardItem(List<String> rewardItem) {
    if (this.reward == null) {
      this.reward = new ArrayList<>();
    }
    this.reward.add(rewardItem);
    return this;
  }

  /**
   * An array of effective priority fees per gas data points from a single block. All zeroes are returned if the block is empty
   * @return reward
   */
  @javax.annotation.Nonnull
  public List<List<String>> getReward() {
    return reward;
  }

  public void setReward(List<List<String>> reward) {
    this.reward = reward;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutputFeeHistory outputFeeHistory = (OutputFeeHistory) o;
    return Objects.equals(this.$schema, outputFeeHistory.$schema) &&
        Objects.equals(this.baseFeePerGas, outputFeeHistory.baseFeePerGas) &&
        Objects.equals(this.gasUsedRatio, outputFeeHistory.gasUsedRatio) &&
        Objects.equals(this.oldestBlock, outputFeeHistory.oldestBlock) &&
        Objects.equals(this.reward, outputFeeHistory.reward);
  }

  @Override
  public int hashCode() {
    return Objects.hash($schema, baseFeePerGas, gasUsedRatio, oldestBlock, reward);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutputFeeHistory {\n");
    sb.append("    $schema: ").append(toIndentedString($schema)).append("\n");
    sb.append("    baseFeePerGas: ").append(toIndentedString(baseFeePerGas)).append("\n");
    sb.append("    gasUsedRatio: ").append(toIndentedString(gasUsedRatio)).append("\n");
    sb.append("    oldestBlock: ").append(toIndentedString(oldestBlock)).append("\n");
    sb.append("    reward: ").append(toIndentedString(reward)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$schema");
    openapiFields.add("BaseFeePerGas");
    openapiFields.add("GasUsedRatio");
    openapiFields.add("OldestBlock");
    openapiFields.add("Reward");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BaseFeePerGas");
    openapiRequiredFields.add("GasUsedRatio");
    openapiRequiredFields.add("OldestBlock");
    openapiRequiredFields.add("Reward");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OutputFeeHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OutputFeeHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutputFeeHistory is not found in the empty JSON string", OutputFeeHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OutputFeeHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OutputFeeHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutputFeeHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$schema") != null && !jsonObj.get("$schema").isJsonNull()) && !jsonObj.get("$schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$schema").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("BaseFeePerGas") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("BaseFeePerGas").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseFeePerGas` to be an array in the JSON string but got `%s`", jsonObj.get("BaseFeePerGas").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("GasUsedRatio") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("GasUsedRatio").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `GasUsedRatio` to be an array in the JSON string but got `%s`", jsonObj.get("GasUsedRatio").toString()));
      }
      if (!jsonObj.get("OldestBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OldestBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OldestBlock").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Reward") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Reward").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Reward` to be an array in the JSON string but got `%s`", jsonObj.get("Reward").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutputFeeHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutputFeeHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutputFeeHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutputFeeHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<OutputFeeHistory>() {
           @Override
           public void write(JsonWriter out, OutputFeeHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OutputFeeHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OutputFeeHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OutputFeeHistory
   * @throws IOException if the JSON string is invalid with respect to OutputFeeHistory
   */
  public static OutputFeeHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutputFeeHistory.class);
  }

  /**
   * Convert an instance of OutputFeeHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

