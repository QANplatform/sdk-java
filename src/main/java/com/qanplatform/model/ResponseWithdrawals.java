/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * ResponseWithdrawals
 */

public class ResponseWithdrawals {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AMOUNT = "Amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private String amount;

  public static final String SERIALIZED_NAME_INDEX = "Index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_VALIDATOR_INDEX = "ValidatorIndex";
  @SerializedName(SERIALIZED_NAME_VALIDATOR_INDEX)
  private Integer validatorIndex;

  public ResponseWithdrawals() {
  }

  public ResponseWithdrawals address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The address to which the withdrawn amount is sent
   * @return address
   */
  @javax.annotation.Nonnull
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ResponseWithdrawals amount(String amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of value, provided in decimal format, corresponding to a certain value in gwei
   * @return amount
   */
  @javax.annotation.Nonnull
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }


  public ResponseWithdrawals index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * The index of the withdrawal to uniquely identify each withdrawal
   * @return index
   */
  @javax.annotation.Nonnull
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public ResponseWithdrawals validatorIndex(Integer validatorIndex) {
    this.validatorIndex = validatorIndex;
    return this;
  }

  /**
   * The index of the validator who initiated the withdrawal
   * @return validatorIndex
   */
  @javax.annotation.Nonnull
  public Integer getValidatorIndex() {
    return validatorIndex;
  }

  public void setValidatorIndex(Integer validatorIndex) {
    this.validatorIndex = validatorIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseWithdrawals responseWithdrawals = (ResponseWithdrawals) o;
    return Objects.equals(this.address, responseWithdrawals.address) &&
        Objects.equals(this.amount, responseWithdrawals.amount) &&
        Objects.equals(this.index, responseWithdrawals.index) &&
        Objects.equals(this.validatorIndex, responseWithdrawals.validatorIndex);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, amount, index, validatorIndex);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseWithdrawals {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    validatorIndex: ").append(toIndentedString(validatorIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("Amount");
    openapiFields.add("Index");
    openapiFields.add("ValidatorIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Address");
    openapiRequiredFields.add("Amount");
    openapiRequiredFields.add("Index");
    openapiRequiredFields.add("ValidatorIndex");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseWithdrawals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseWithdrawals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseWithdrawals is not found in the empty JSON string", ResponseWithdrawals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseWithdrawals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseWithdrawals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResponseWithdrawals.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if (!jsonObj.get("Amount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Amount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Amount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseWithdrawals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseWithdrawals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseWithdrawals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseWithdrawals.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseWithdrawals>() {
           @Override
           public void write(JsonWriter out, ResponseWithdrawals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseWithdrawals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseWithdrawals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseWithdrawals
   * @throws IOException if the JSON string is invalid with respect to ResponseWithdrawals
   */
  public static ResponseWithdrawals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseWithdrawals.class);
  }

  /**
   * Convert an instance of ResponseWithdrawals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

