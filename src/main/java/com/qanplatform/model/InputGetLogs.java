/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * InputGetLogs
 */

public class InputGetLogs {
  public static final String SERIALIZED_NAME_$_SCHEMA = "$schema";
  @SerializedName(SERIALIZED_NAME_$_SCHEMA)
  private URI $schema;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_BLOCK_HASH = "BlockHash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_FROM_BLOCK = "FromBlock";
  @SerializedName(SERIALIZED_NAME_FROM_BLOCK)
  private String fromBlock;

  public static final String SERIALIZED_NAME_TO_BLOCK = "ToBlock";
  @SerializedName(SERIALIZED_NAME_TO_BLOCK)
  private String toBlock;

  public static final String SERIALIZED_NAME_TOPICS = "Topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = new ArrayList<>();

  public InputGetLogs() {
  }

  public InputGetLogs(
     URI $schema
  ) {
    this();
    this.$schema = $schema;
  }

  /**
   * A URL to the JSON Schema for this object.
   * @return $schema
   */
  @javax.annotation.Nullable
  public URI get$Schema() {
    return $schema;
  }



  public InputGetLogs address(String address) {
    this.address = address;
    return this;
  }

  /**
   * The contract address or a list of addresses from which logs should originate
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public InputGetLogs blockHash(String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  /**
   * With the addition of EIP-234, blockHash is a new filter option that restricts the logs returned to the block number referenced in the blockHash. Using the blockHash field is equivalent to setting the fromBlock and toBlock to the block number the blockHash references. If blockHash is present in the filter criteria, neither fromBlock nor toBlock is allowed
   * @return blockHash
   */
  @javax.annotation.Nullable
  public String getBlockHash() {
    return blockHash;
  }

  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public InputGetLogs fromBlock(String fromBlock) {
    this.fromBlock = fromBlock;
    return this;
  }

  /**
   * The block number as a string in decimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
   * @return fromBlock
   */
  @javax.annotation.Nullable
  public String getFromBlock() {
    return fromBlock;
  }

  public void setFromBlock(String fromBlock) {
    this.fromBlock = fromBlock;
  }


  public InputGetLogs toBlock(String toBlock) {
    this.toBlock = toBlock;
    return this;
  }

  /**
   * The block number as a string in decimal format or tags. The supported tag values include earliest for the earliest/genesis block, latest for the latest mined block, pending for the pending state/transactions.
   * @return toBlock
   */
  @javax.annotation.Nullable
  public String getToBlock() {
    return toBlock;
  }

  public void setToBlock(String toBlock) {
    this.toBlock = toBlock;
  }


  public InputGetLogs topics(List<String> topics) {
    this.topics = topics;
    return this;
  }

  public InputGetLogs addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

  /**
   * An array of DATA topics and also, the topics are order-dependent. Visit this official page to learn more about topics
   * @return topics
   */
  @javax.annotation.Nullable
  public List<String> getTopics() {
    return topics;
  }

  public void setTopics(List<String> topics) {
    this.topics = topics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputGetLogs inputGetLogs = (InputGetLogs) o;
    return Objects.equals(this.$schema, inputGetLogs.$schema) &&
        Objects.equals(this.address, inputGetLogs.address) &&
        Objects.equals(this.blockHash, inputGetLogs.blockHash) &&
        Objects.equals(this.fromBlock, inputGetLogs.fromBlock) &&
        Objects.equals(this.toBlock, inputGetLogs.toBlock) &&
        Objects.equals(this.topics, inputGetLogs.topics);
  }

  @Override
  public int hashCode() {
    return Objects.hash($schema, address, blockHash, fromBlock, toBlock, topics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputGetLogs {\n");
    sb.append("    $schema: ").append(toIndentedString($schema)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    fromBlock: ").append(toIndentedString(fromBlock)).append("\n");
    sb.append("    toBlock: ").append(toIndentedString(toBlock)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$schema");
    openapiFields.add("Address");
    openapiFields.add("BlockHash");
    openapiFields.add("FromBlock");
    openapiFields.add("ToBlock");
    openapiFields.add("Topics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputGetLogs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputGetLogs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputGetLogs is not found in the empty JSON string", InputGetLogs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputGetLogs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputGetLogs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$schema") != null && !jsonObj.get("$schema").isJsonNull()) && !jsonObj.get("$schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$schema").toString()));
      }
      if ((jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) && !jsonObj.get("Address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address").toString()));
      }
      if ((jsonObj.get("BlockHash") != null && !jsonObj.get("BlockHash").isJsonNull()) && !jsonObj.get("BlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockHash").toString()));
      }
      if ((jsonObj.get("FromBlock") != null && !jsonObj.get("FromBlock").isJsonNull()) && !jsonObj.get("FromBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FromBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FromBlock").toString()));
      }
      if ((jsonObj.get("ToBlock") != null && !jsonObj.get("ToBlock").isJsonNull()) && !jsonObj.get("ToBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ToBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ToBlock").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Topics") != null && !jsonObj.get("Topics").isJsonNull() && !jsonObj.get("Topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Topics` to be an array in the JSON string but got `%s`", jsonObj.get("Topics").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputGetLogs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputGetLogs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputGetLogs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputGetLogs.class));

       return (TypeAdapter<T>) new TypeAdapter<InputGetLogs>() {
           @Override
           public void write(JsonWriter out, InputGetLogs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputGetLogs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputGetLogs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputGetLogs
   * @throws IOException if the JSON string is invalid with respect to InputGetLogs
   */
  public static InputGetLogs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputGetLogs.class);
  }

  /**
   * Convert an instance of InputGetLogs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

