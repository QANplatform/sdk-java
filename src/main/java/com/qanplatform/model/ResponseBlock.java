/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.qanplatform.model.ResponseTransaction;
import com.qanplatform.model.ResponseWithdrawals;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * ResponseBlock
 */

public class ResponseBlock {
  public static final String SERIALIZED_NAME_BASE_FEE_PER_GAS = "BaseFeePerGas";
  @SerializedName(SERIALIZED_NAME_BASE_FEE_PER_GAS)
  private String baseFeePerGas;

  public static final String SERIALIZED_NAME_DIFFICULTY = "Difficulty";
  @SerializedName(SERIALIZED_NAME_DIFFICULTY)
  private String difficulty;

  public static final String SERIALIZED_NAME_EXTRA_DATA = "ExtraData";
  @SerializedName(SERIALIZED_NAME_EXTRA_DATA)
  private String extraData;

  public static final String SERIALIZED_NAME_GAS_LIMIT = "GasLimit";
  @SerializedName(SERIALIZED_NAME_GAS_LIMIT)
  private String gasLimit;

  public static final String SERIALIZED_NAME_GAS_USED = "GasUsed";
  @SerializedName(SERIALIZED_NAME_GAS_USED)
  private String gasUsed;

  public static final String SERIALIZED_NAME_HASH = "Hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_LOGS_BLOOM = "LogsBloom";
  @SerializedName(SERIALIZED_NAME_LOGS_BLOOM)
  private String logsBloom;

  public static final String SERIALIZED_NAME_MINER = "Miner";
  @SerializedName(SERIALIZED_NAME_MINER)
  private String miner;

  public static final String SERIALIZED_NAME_MIX_HASH = "MixHash";
  @SerializedName(SERIALIZED_NAME_MIX_HASH)
  private String mixHash;

  public static final String SERIALIZED_NAME_NONCE = "Nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_NUMBER = "Number";
  @SerializedName(SERIALIZED_NAME_NUMBER)
  private String number;

  public static final String SERIALIZED_NAME_PARENT_HASH = "ParentHash";
  @SerializedName(SERIALIZED_NAME_PARENT_HASH)
  private String parentHash;

  public static final String SERIALIZED_NAME_RECEIPTS_ROOT = "ReceiptsRoot";
  @SerializedName(SERIALIZED_NAME_RECEIPTS_ROOT)
  private String receiptsRoot;

  public static final String SERIALIZED_NAME_SHA3_UNCLES = "Sha3Uncles";
  @SerializedName(SERIALIZED_NAME_SHA3_UNCLES)
  private String sha3Uncles;

  public static final String SERIALIZED_NAME_SIZE = "Size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STATE_ROOT = "StateRoot";
  @SerializedName(SERIALIZED_NAME_STATE_ROOT)
  private String stateRoot;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TOTAL_DIFFICULTY = "TotalDifficulty";
  @SerializedName(SERIALIZED_NAME_TOTAL_DIFFICULTY)
  private String totalDifficulty;

  public static final String SERIALIZED_NAME_TRANSACTIONS = "Transactions";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS)
  private List<ResponseTransaction> transactions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTIONS_ROOT = "TransactionsRoot";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONS_ROOT)
  private String transactionsRoot;

  public static final String SERIALIZED_NAME_UNCLES = "Uncles";
  @SerializedName(SERIALIZED_NAME_UNCLES)
  private List<String> uncles = new ArrayList<>();

  public static final String SERIALIZED_NAME_WITHDRAWALS = "Withdrawals";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS)
  private ResponseWithdrawals withdrawals;

  public static final String SERIALIZED_NAME_WITHDRAWALS_ROOT = "WithdrawalsRoot";
  @SerializedName(SERIALIZED_NAME_WITHDRAWALS_ROOT)
  private String withdrawalsRoot;

  public ResponseBlock() {
  }

  public ResponseBlock baseFeePerGas(String baseFeePerGas) {
    this.baseFeePerGas = baseFeePerGas;
    return this;
  }

  /**
   * A string of the base fee encoded in decimal format. Please note that this response field will not be included in a block requested before the EIP-1559 upgrade
   * @return baseFeePerGas
   */
  @javax.annotation.Nullable
  public String getBaseFeePerGas() {
    return baseFeePerGas;
  }

  public void setBaseFeePerGas(String baseFeePerGas) {
    this.baseFeePerGas = baseFeePerGas;
  }


  public ResponseBlock difficulty(String difficulty) {
    this.difficulty = difficulty;
    return this;
  }

  /**
   * The integer of the difficulty for this block encoded as a decimal
   * @return difficulty
   */
  @javax.annotation.Nonnull
  public String getDifficulty() {
    return difficulty;
  }

  public void setDifficulty(String difficulty) {
    this.difficulty = difficulty;
  }


  public ResponseBlock extraData(String extraData) {
    this.extraData = extraData;
    return this;
  }

  /**
   * The “extra data” field of this block
   * @return extraData
   */
  @javax.annotation.Nonnull
  public String getExtraData() {
    return extraData;
  }

  public void setExtraData(String extraData) {
    this.extraData = extraData;
  }


  public ResponseBlock gasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
    return this;
  }

  /**
   * The maximum gas allowed in this block encoded as a decimal
   * @return gasLimit
   */
  @javax.annotation.Nonnull
  public String getGasLimit() {
    return gasLimit;
  }

  public void setGasLimit(String gasLimit) {
    this.gasLimit = gasLimit;
  }


  public ResponseBlock gasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

  /**
   * The total used gas by all transactions in this block encoded as a decimal
   * @return gasUsed
   */
  @javax.annotation.Nonnull
  public String getGasUsed() {
    return gasUsed;
  }

  public void setGasUsed(String gasUsed) {
    this.gasUsed = gasUsed;
  }


  public ResponseBlock hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The block hash of the requested block. null if pending
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public ResponseBlock logsBloom(String logsBloom) {
    this.logsBloom = logsBloom;
    return this;
  }

  /**
   * The bloom filter for the logs of the block. null if pending
   * @return logsBloom
   */
  @javax.annotation.Nullable
  public String getLogsBloom() {
    return logsBloom;
  }

  public void setLogsBloom(String logsBloom) {
    this.logsBloom = logsBloom;
  }


  public ResponseBlock miner(String miner) {
    this.miner = miner;
    return this;
  }

  /**
   * The address of the beneficiary to whom the mining rewards were given
   * @return miner
   */
  @javax.annotation.Nonnull
  public String getMiner() {
    return miner;
  }

  public void setMiner(String miner) {
    this.miner = miner;
  }


  public ResponseBlock mixHash(String mixHash) {
    this.mixHash = mixHash;
    return this;
  }

  /**
   * A string of a 256-bit hash encoded as a decimal
   * @return mixHash
   */
  @javax.annotation.Nonnull
  public String getMixHash() {
    return mixHash;
  }

  public void setMixHash(String mixHash) {
    this.mixHash = mixHash;
  }


  public ResponseBlock nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * The hash of the generated proof-of-work. null if pending
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public ResponseBlock number(String number) {
    this.number = number;
    return this;
  }

  /**
   * The block number of the requested block encoded as a decimal. null if pending
   * @return number
   */
  @javax.annotation.Nullable
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }


  public ResponseBlock parentHash(String parentHash) {
    this.parentHash = parentHash;
    return this;
  }

  /**
   * The hash of the parent block
   * @return parentHash
   */
  @javax.annotation.Nonnull
  public String getParentHash() {
    return parentHash;
  }

  public void setParentHash(String parentHash) {
    this.parentHash = parentHash;
  }


  public ResponseBlock receiptsRoot(String receiptsRoot) {
    this.receiptsRoot = receiptsRoot;
    return this;
  }

  /**
   * The root of the receipts trie of the bloc
   * @return receiptsRoot
   */
  @javax.annotation.Nonnull
  public String getReceiptsRoot() {
    return receiptsRoot;
  }

  public void setReceiptsRoot(String receiptsRoot) {
    this.receiptsRoot = receiptsRoot;
  }


  public ResponseBlock sha3Uncles(String sha3Uncles) {
    this.sha3Uncles = sha3Uncles;
    return this;
  }

  /**
   * The SHA3 of the uncles data in the block
   * @return sha3Uncles
   */
  @javax.annotation.Nonnull
  public String getSha3Uncles() {
    return sha3Uncles;
  }

  public void setSha3Uncles(String sha3Uncles) {
    this.sha3Uncles = sha3Uncles;
  }


  public ResponseBlock size(String size) {
    this.size = size;
    return this;
  }

  /**
   * The size of this block in bytes as an Integer value encoded as decimal
   * @return size
   */
  @javax.annotation.Nonnull
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public ResponseBlock stateRoot(String stateRoot) {
    this.stateRoot = stateRoot;
    return this;
  }

  /**
   * The root of the final state trie of the block
   * @return stateRoot
   */
  @javax.annotation.Nonnull
  public String getStateRoot() {
    return stateRoot;
  }

  public void setStateRoot(String stateRoot) {
    this.stateRoot = stateRoot;
  }


  public ResponseBlock timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The unix timestamp for when the block was collated
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public ResponseBlock totalDifficulty(String totalDifficulty) {
    this.totalDifficulty = totalDifficulty;
    return this;
  }

  /**
   * The integer of the total difficulty of the chain until this block encoded as a decimal
   * @return totalDifficulty
   */
  @javax.annotation.Nonnull
  public String getTotalDifficulty() {
    return totalDifficulty;
  }

  public void setTotalDifficulty(String totalDifficulty) {
    this.totalDifficulty = totalDifficulty;
  }


  public ResponseBlock transactions(List<ResponseTransaction> transactions) {
    this.transactions = transactions;
    return this;
  }

  public ResponseBlock addTransactionsItem(ResponseTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

  /**
   * An array of transaction objects - please see getTransactionByHash for exact shape
   * @return transactions
   */
  @javax.annotation.Nonnull
  public List<ResponseTransaction> getTransactions() {
    return transactions;
  }

  public void setTransactions(List<ResponseTransaction> transactions) {
    this.transactions = transactions;
  }


  public ResponseBlock transactionsRoot(String transactionsRoot) {
    this.transactionsRoot = transactionsRoot;
    return this;
  }

  /**
   * The root of the transaction trie of the block
   * @return transactionsRoot
   */
  @javax.annotation.Nonnull
  public String getTransactionsRoot() {
    return transactionsRoot;
  }

  public void setTransactionsRoot(String transactionsRoot) {
    this.transactionsRoot = transactionsRoot;
  }


  public ResponseBlock uncles(List<String> uncles) {
    this.uncles = uncles;
    return this;
  }

  public ResponseBlock addUnclesItem(String unclesItem) {
    if (this.uncles == null) {
      this.uncles = new ArrayList<>();
    }
    this.uncles.add(unclesItem);
    return this;
  }

  /**
   * An array of uncle hashes
   * @return uncles
   */
  @javax.annotation.Nonnull
  public List<String> getUncles() {
    return uncles;
  }

  public void setUncles(List<String> uncles) {
    this.uncles = uncles;
  }


  public ResponseBlock withdrawals(ResponseWithdrawals withdrawals) {
    this.withdrawals = withdrawals;
    return this;
  }

  /**
   * A withdrawals object contains information about withdrawals made by validators. Please note that this field will not be included in a block requested before the EIP-4895 upgrade
   * @return withdrawals
   */
  @javax.annotation.Nonnull
  public ResponseWithdrawals getWithdrawals() {
    return withdrawals;
  }

  public void setWithdrawals(ResponseWithdrawals withdrawals) {
    this.withdrawals = withdrawals;
  }


  public ResponseBlock withdrawalsRoot(String withdrawalsRoot) {
    this.withdrawalsRoot = withdrawalsRoot;
    return this;
  }

  /**
   * The Merkle root of withdrawal data. Also, please note that this field will not be included in a block requested before the EIP-4895 upgrade
   * @return withdrawalsRoot
   */
  @javax.annotation.Nullable
  public String getWithdrawalsRoot() {
    return withdrawalsRoot;
  }

  public void setWithdrawalsRoot(String withdrawalsRoot) {
    this.withdrawalsRoot = withdrawalsRoot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseBlock responseBlock = (ResponseBlock) o;
    return Objects.equals(this.baseFeePerGas, responseBlock.baseFeePerGas) &&
        Objects.equals(this.difficulty, responseBlock.difficulty) &&
        Objects.equals(this.extraData, responseBlock.extraData) &&
        Objects.equals(this.gasLimit, responseBlock.gasLimit) &&
        Objects.equals(this.gasUsed, responseBlock.gasUsed) &&
        Objects.equals(this.hash, responseBlock.hash) &&
        Objects.equals(this.logsBloom, responseBlock.logsBloom) &&
        Objects.equals(this.miner, responseBlock.miner) &&
        Objects.equals(this.mixHash, responseBlock.mixHash) &&
        Objects.equals(this.nonce, responseBlock.nonce) &&
        Objects.equals(this.number, responseBlock.number) &&
        Objects.equals(this.parentHash, responseBlock.parentHash) &&
        Objects.equals(this.receiptsRoot, responseBlock.receiptsRoot) &&
        Objects.equals(this.sha3Uncles, responseBlock.sha3Uncles) &&
        Objects.equals(this.size, responseBlock.size) &&
        Objects.equals(this.stateRoot, responseBlock.stateRoot) &&
        Objects.equals(this.timestamp, responseBlock.timestamp) &&
        Objects.equals(this.totalDifficulty, responseBlock.totalDifficulty) &&
        Objects.equals(this.transactions, responseBlock.transactions) &&
        Objects.equals(this.transactionsRoot, responseBlock.transactionsRoot) &&
        Objects.equals(this.uncles, responseBlock.uncles) &&
        Objects.equals(this.withdrawals, responseBlock.withdrawals) &&
        Objects.equals(this.withdrawalsRoot, responseBlock.withdrawalsRoot);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash, logsBloom, miner, mixHash, nonce, number, parentHash, receiptsRoot, sha3Uncles, size, stateRoot, timestamp, totalDifficulty, transactions, transactionsRoot, uncles, withdrawals, withdrawalsRoot);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseBlock {\n");
    sb.append("    baseFeePerGas: ").append(toIndentedString(baseFeePerGas)).append("\n");
    sb.append("    difficulty: ").append(toIndentedString(difficulty)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    logsBloom: ").append(toIndentedString(logsBloom)).append("\n");
    sb.append("    miner: ").append(toIndentedString(miner)).append("\n");
    sb.append("    mixHash: ").append(toIndentedString(mixHash)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    parentHash: ").append(toIndentedString(parentHash)).append("\n");
    sb.append("    receiptsRoot: ").append(toIndentedString(receiptsRoot)).append("\n");
    sb.append("    sha3Uncles: ").append(toIndentedString(sha3Uncles)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    stateRoot: ").append(toIndentedString(stateRoot)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    totalDifficulty: ").append(toIndentedString(totalDifficulty)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("    transactionsRoot: ").append(toIndentedString(transactionsRoot)).append("\n");
    sb.append("    uncles: ").append(toIndentedString(uncles)).append("\n");
    sb.append("    withdrawals: ").append(toIndentedString(withdrawals)).append("\n");
    sb.append("    withdrawalsRoot: ").append(toIndentedString(withdrawalsRoot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BaseFeePerGas");
    openapiFields.add("Difficulty");
    openapiFields.add("ExtraData");
    openapiFields.add("GasLimit");
    openapiFields.add("GasUsed");
    openapiFields.add("Hash");
    openapiFields.add("LogsBloom");
    openapiFields.add("Miner");
    openapiFields.add("MixHash");
    openapiFields.add("Nonce");
    openapiFields.add("Number");
    openapiFields.add("ParentHash");
    openapiFields.add("ReceiptsRoot");
    openapiFields.add("Sha3Uncles");
    openapiFields.add("Size");
    openapiFields.add("StateRoot");
    openapiFields.add("Timestamp");
    openapiFields.add("TotalDifficulty");
    openapiFields.add("Transactions");
    openapiFields.add("TransactionsRoot");
    openapiFields.add("Uncles");
    openapiFields.add("Withdrawals");
    openapiFields.add("WithdrawalsRoot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BaseFeePerGas");
    openapiRequiredFields.add("Difficulty");
    openapiRequiredFields.add("ExtraData");
    openapiRequiredFields.add("GasLimit");
    openapiRequiredFields.add("GasUsed");
    openapiRequiredFields.add("Hash");
    openapiRequiredFields.add("LogsBloom");
    openapiRequiredFields.add("Miner");
    openapiRequiredFields.add("MixHash");
    openapiRequiredFields.add("Nonce");
    openapiRequiredFields.add("Number");
    openapiRequiredFields.add("ParentHash");
    openapiRequiredFields.add("ReceiptsRoot");
    openapiRequiredFields.add("Sha3Uncles");
    openapiRequiredFields.add("Size");
    openapiRequiredFields.add("StateRoot");
    openapiRequiredFields.add("Timestamp");
    openapiRequiredFields.add("TotalDifficulty");
    openapiRequiredFields.add("Transactions");
    openapiRequiredFields.add("TransactionsRoot");
    openapiRequiredFields.add("Uncles");
    openapiRequiredFields.add("Withdrawals");
    openapiRequiredFields.add("WithdrawalsRoot");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseBlock
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseBlock.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseBlock is not found in the empty JSON string", ResponseBlock.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseBlock.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseBlock` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResponseBlock.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BaseFeePerGas") != null && !jsonObj.get("BaseFeePerGas").isJsonNull()) && !jsonObj.get("BaseFeePerGas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BaseFeePerGas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BaseFeePerGas").toString()));
      }
      if (!jsonObj.get("Difficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Difficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Difficulty").toString()));
      }
      if (!jsonObj.get("ExtraData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExtraData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExtraData").toString()));
      }
      if (!jsonObj.get("GasLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GasLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GasLimit").toString()));
      }
      if (!jsonObj.get("GasUsed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GasUsed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GasUsed").toString()));
      }
      if ((jsonObj.get("Hash") != null && !jsonObj.get("Hash").isJsonNull()) && !jsonObj.get("Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hash").toString()));
      }
      if ((jsonObj.get("LogsBloom") != null && !jsonObj.get("LogsBloom").isJsonNull()) && !jsonObj.get("LogsBloom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LogsBloom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LogsBloom").toString()));
      }
      if (!jsonObj.get("Miner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Miner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Miner").toString()));
      }
      if (!jsonObj.get("MixHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MixHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MixHash").toString()));
      }
      if ((jsonObj.get("Nonce") != null && !jsonObj.get("Nonce").isJsonNull()) && !jsonObj.get("Nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Nonce").toString()));
      }
      if ((jsonObj.get("Number") != null && !jsonObj.get("Number").isJsonNull()) && !jsonObj.get("Number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Number").toString()));
      }
      if (!jsonObj.get("ParentHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParentHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ParentHash").toString()));
      }
      if (!jsonObj.get("ReceiptsRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReceiptsRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReceiptsRoot").toString()));
      }
      if (!jsonObj.get("Sha3Uncles").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sha3Uncles` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sha3Uncles").toString()));
      }
      if (!jsonObj.get("Size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Size").toString()));
      }
      if (!jsonObj.get("StateRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateRoot").toString()));
      }
      if (!jsonObj.get("Timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timestamp").toString()));
      }
      if (!jsonObj.get("TotalDifficulty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalDifficulty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalDifficulty").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Transactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Transactions` to be an array in the JSON string but got `%s`", jsonObj.get("Transactions").toString()));
      }

      JsonArray jsonArraytransactions = jsonObj.getAsJsonArray("Transactions");
      // validate the required field `Transactions` (array)
      for (int i = 0; i < jsonArraytransactions.size(); i++) {
        ResponseTransaction.validateJsonElement(jsonArraytransactions.get(i));
      };
      if (!jsonObj.get("TransactionsRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionsRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionsRoot").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Uncles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Uncles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Uncles` to be an array in the JSON string but got `%s`", jsonObj.get("Uncles").toString()));
      }
      // validate the required field `Withdrawals`
      ResponseWithdrawals.validateJsonElement(jsonObj.get("Withdrawals"));
      if ((jsonObj.get("WithdrawalsRoot") != null && !jsonObj.get("WithdrawalsRoot").isJsonNull()) && !jsonObj.get("WithdrawalsRoot").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WithdrawalsRoot` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WithdrawalsRoot").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseBlock.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseBlock' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseBlock> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseBlock.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseBlock>() {
           @Override
           public void write(JsonWriter out, ResponseBlock value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseBlock read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseBlock given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseBlock
   * @throws IOException if the JSON string is invalid with respect to ResponseBlock
   */
  public static ResponseBlock fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseBlock.class);
  }

  /**
   * Convert an instance of ResponseBlock to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

