/*
 * QAN AutoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.qanplatform.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.qanplatform.invoker.JSON;

/**
 * ResponseTransaction
 */

public class ResponseTransaction {
  public static final String SERIALIZED_NAME_ACCESS_LIST = "AccessList";
  @SerializedName(SERIALIZED_NAME_ACCESS_LIST)
  private String accessList;

  public static final String SERIALIZED_NAME_BLOCK_HASH = "BlockHash";
  @SerializedName(SERIALIZED_NAME_BLOCK_HASH)
  private String blockHash;

  public static final String SERIALIZED_NAME_BLOCK_NUMBER = "BlockNumber";
  @SerializedName(SERIALIZED_NAME_BLOCK_NUMBER)
  private String blockNumber;

  public static final String SERIALIZED_NAME_CHAIN_ID = "ChainId";
  @SerializedName(SERIALIZED_NAME_CHAIN_ID)
  private String chainId;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_GAS = "Gas";
  @SerializedName(SERIALIZED_NAME_GAS)
  private String gas;

  public static final String SERIALIZED_NAME_GAS_PRICE = "GasPrice";
  @SerializedName(SERIALIZED_NAME_GAS_PRICE)
  private String gasPrice;

  public static final String SERIALIZED_NAME_HASH = "Hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public static final String SERIALIZED_NAME_INPUT = "Input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_MAX_FEE_PER_GAS = "MaxFeePerGas";
  @SerializedName(SERIALIZED_NAME_MAX_FEE_PER_GAS)
  private String maxFeePerGas;

  public static final String SERIALIZED_NAME_MAX_PRIORITY_FEE_PER_GAS = "MaxPriorityFeePerGas";
  @SerializedName(SERIALIZED_NAME_MAX_PRIORITY_FEE_PER_GAS)
  private String maxPriorityFeePerGas;

  public static final String SERIALIZED_NAME_NONCE = "Nonce";
  @SerializedName(SERIALIZED_NAME_NONCE)
  private String nonce;

  public static final String SERIALIZED_NAME_R = "R";
  @SerializedName(SERIALIZED_NAME_R)
  private String R;

  public static final String SERIALIZED_NAME_S = "S";
  @SerializedName(SERIALIZED_NAME_S)
  private String S;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_TRANSACTION_INDEX = "TransactionIndex";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_INDEX)
  private String transactionIndex;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_V = "V";
  @SerializedName(SERIALIZED_NAME_V)
  private String V;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public ResponseTransaction() {
  }

  public ResponseTransaction accessList(String accessList) {
    this.accessList = accessList;
    return this;
  }

  /**
   * A list of addresses and storage keys that the transaction plans to access
   * @return accessList
   */
  @javax.annotation.Nullable
  public String getAccessList() {
    return accessList;
  }

  public void setAccessList(String accessList) {
    this.accessList = accessList;
  }


  public ResponseTransaction blockHash(String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  /**
   * The hash of the block where this transaction was in. Null when it&#39;s a pending transaction
   * @return blockHash
   */
  @javax.annotation.Nullable
  public String getBlockHash() {
    return blockHash;
  }

  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }


  public ResponseTransaction blockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

  /**
   * The block number where this transaction was in. Null when it&#39;s a pending transaction
   * @return blockNumber
   */
  @javax.annotation.Nullable
  public String getBlockNumber() {
    return blockNumber;
  }

  public void setBlockNumber(String blockNumber) {
    this.blockNumber = blockNumber;
  }


  public ResponseTransaction chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  /**
   * The chain id of the transaction, if any
   * @return chainId
   */
  @javax.annotation.Nullable
  public String getChainId() {
    return chainId;
  }

  public void setChainId(String chainId) {
    this.chainId = chainId;
  }


  public ResponseTransaction from(String from) {
    this.from = from;
    return this;
  }

  /**
   * The address of the sender
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public ResponseTransaction gas(String gas) {
    this.gas = gas;
    return this;
  }

  /**
   * The gas provided by the sender, encoded as decimal
   * @return gas
   */
  @javax.annotation.Nullable
  public String getGas() {
    return gas;
  }

  public void setGas(String gas) {
    this.gas = gas;
  }


  public ResponseTransaction gasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

  /**
   * The gas price provided by the sender in wei encoded as decimal
   * @return gasPrice
   */
  @javax.annotation.Nullable
  public String getGasPrice() {
    return gasPrice;
  }

  public void setGasPrice(String gasPrice) {
    this.gasPrice = gasPrice;
  }


  public ResponseTransaction hash(String hash) {
    this.hash = hash;
    return this;
  }

  /**
   * The hash of the transaction
   * @return hash
   */
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }


  public ResponseTransaction input(String input) {
    this.input = input;
    return this;
  }

  /**
   * The data sent along with the transaction
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public ResponseTransaction maxFeePerGas(String maxFeePerGas) {
    this.maxFeePerGas = maxFeePerGas;
    return this;
  }

  /**
   * The maximum fee per gas set in the transaction
   * @return maxFeePerGas
   */
  @javax.annotation.Nullable
  public String getMaxFeePerGas() {
    return maxFeePerGas;
  }

  public void setMaxFeePerGas(String maxFeePerGas) {
    this.maxFeePerGas = maxFeePerGas;
  }


  public ResponseTransaction maxPriorityFeePerGas(String maxPriorityFeePerGas) {
    this.maxPriorityFeePerGas = maxPriorityFeePerGas;
    return this;
  }

  /**
   * The maximum priority gas fee set in the transaction
   * @return maxPriorityFeePerGas
   */
  @javax.annotation.Nullable
  public String getMaxPriorityFeePerGas() {
    return maxPriorityFeePerGas;
  }

  public void setMaxPriorityFeePerGas(String maxPriorityFeePerGas) {
    this.maxPriorityFeePerGas = maxPriorityFeePerGas;
  }


  public ResponseTransaction nonce(String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * The number of transactions made by the sender prior to this one encoded as decimal
   * @return nonce
   */
  @javax.annotation.Nullable
  public String getNonce() {
    return nonce;
  }

  public void setNonce(String nonce) {
    this.nonce = nonce;
  }


  public ResponseTransaction R(String R) {
    this.R = R;
    return this;
  }

  /**
   * The R field of the signature
   * @return R
   */
  @javax.annotation.Nullable
  public String getR() {
    return R;
  }

  public void setR(String R) {
    this.R = R;
  }


  public ResponseTransaction S(String S) {
    this.S = S;
    return this;
  }

  /**
   * The S field of the signature
   * @return S
   */
  @javax.annotation.Nullable
  public String getS() {
    return S;
  }

  public void setS(String S) {
    this.S = S;
  }


  public ResponseTransaction to(String to) {
    this.to = to;
    return this;
  }

  /**
   * The address of the receiver. Null when its a contract creation transaction
   * @return to
   */
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public ResponseTransaction transactionIndex(String transactionIndex) {
    this.transactionIndex = transactionIndex;
    return this;
  }

  /**
   * The integer of the transaction&#39;s index position that the log was created from. Null when it&#39;s a pending log
   * @return transactionIndex
   */
  @javax.annotation.Nullable
  public String getTransactionIndex() {
    return transactionIndex;
  }

  public void setTransactionIndex(String transactionIndex) {
    this.transactionIndex = transactionIndex;
  }


  public ResponseTransaction type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The transaction type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ResponseTransaction V(String V) {
    this.V = V;
    return this;
  }

  /**
   * The standardized V field of the signature
   * @return V
   */
  @javax.annotation.Nullable
  public String getV() {
    return V;
  }

  public void setV(String V) {
    this.V = V;
  }


  public ResponseTransaction value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The value transferred in wei encoded as decimal
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseTransaction responseTransaction = (ResponseTransaction) o;
    return Objects.equals(this.accessList, responseTransaction.accessList) &&
        Objects.equals(this.blockHash, responseTransaction.blockHash) &&
        Objects.equals(this.blockNumber, responseTransaction.blockNumber) &&
        Objects.equals(this.chainId, responseTransaction.chainId) &&
        Objects.equals(this.from, responseTransaction.from) &&
        Objects.equals(this.gas, responseTransaction.gas) &&
        Objects.equals(this.gasPrice, responseTransaction.gasPrice) &&
        Objects.equals(this.hash, responseTransaction.hash) &&
        Objects.equals(this.input, responseTransaction.input) &&
        Objects.equals(this.maxFeePerGas, responseTransaction.maxFeePerGas) &&
        Objects.equals(this.maxPriorityFeePerGas, responseTransaction.maxPriorityFeePerGas) &&
        Objects.equals(this.nonce, responseTransaction.nonce) &&
        Objects.equals(this.R, responseTransaction.R) &&
        Objects.equals(this.S, responseTransaction.S) &&
        Objects.equals(this.to, responseTransaction.to) &&
        Objects.equals(this.transactionIndex, responseTransaction.transactionIndex) &&
        Objects.equals(this.type, responseTransaction.type) &&
        Objects.equals(this.V, responseTransaction.V) &&
        Objects.equals(this.value, responseTransaction.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessList, blockHash, blockNumber, chainId, from, gas, gasPrice, hash, input, maxFeePerGas, maxPriorityFeePerGas, nonce, R, S, to, transactionIndex, type, V, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseTransaction {\n");
    sb.append("    accessList: ").append(toIndentedString(accessList)).append("\n");
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    gas: ").append(toIndentedString(gas)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    maxFeePerGas: ").append(toIndentedString(maxFeePerGas)).append("\n");
    sb.append("    maxPriorityFeePerGas: ").append(toIndentedString(maxPriorityFeePerGas)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    R: ").append(toIndentedString(R)).append("\n");
    sb.append("    S: ").append(toIndentedString(S)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    transactionIndex: ").append(toIndentedString(transactionIndex)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    V: ").append(toIndentedString(V)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessList");
    openapiFields.add("BlockHash");
    openapiFields.add("BlockNumber");
    openapiFields.add("ChainId");
    openapiFields.add("From");
    openapiFields.add("Gas");
    openapiFields.add("GasPrice");
    openapiFields.add("Hash");
    openapiFields.add("Input");
    openapiFields.add("MaxFeePerGas");
    openapiFields.add("MaxPriorityFeePerGas");
    openapiFields.add("Nonce");
    openapiFields.add("R");
    openapiFields.add("S");
    openapiFields.add("To");
    openapiFields.add("TransactionIndex");
    openapiFields.add("Type");
    openapiFields.add("V");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseTransaction is not found in the empty JSON string", ResponseTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccessList") != null && !jsonObj.get("AccessList").isJsonNull()) && !jsonObj.get("AccessList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessList").toString()));
      }
      if ((jsonObj.get("BlockHash") != null && !jsonObj.get("BlockHash").isJsonNull()) && !jsonObj.get("BlockHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockHash").toString()));
      }
      if ((jsonObj.get("BlockNumber") != null && !jsonObj.get("BlockNumber").isJsonNull()) && !jsonObj.get("BlockNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BlockNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BlockNumber").toString()));
      }
      if ((jsonObj.get("ChainId") != null && !jsonObj.get("ChainId").isJsonNull()) && !jsonObj.get("ChainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChainId").toString()));
      }
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if ((jsonObj.get("Gas") != null && !jsonObj.get("Gas").isJsonNull()) && !jsonObj.get("Gas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gas").toString()));
      }
      if ((jsonObj.get("GasPrice") != null && !jsonObj.get("GasPrice").isJsonNull()) && !jsonObj.get("GasPrice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GasPrice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GasPrice").toString()));
      }
      if ((jsonObj.get("Hash") != null && !jsonObj.get("Hash").isJsonNull()) && !jsonObj.get("Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Hash").toString()));
      }
      if ((jsonObj.get("Input") != null && !jsonObj.get("Input").isJsonNull()) && !jsonObj.get("Input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Input").toString()));
      }
      if ((jsonObj.get("MaxFeePerGas") != null && !jsonObj.get("MaxFeePerGas").isJsonNull()) && !jsonObj.get("MaxFeePerGas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxFeePerGas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxFeePerGas").toString()));
      }
      if ((jsonObj.get("MaxPriorityFeePerGas") != null && !jsonObj.get("MaxPriorityFeePerGas").isJsonNull()) && !jsonObj.get("MaxPriorityFeePerGas").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaxPriorityFeePerGas` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaxPriorityFeePerGas").toString()));
      }
      if ((jsonObj.get("Nonce") != null && !jsonObj.get("Nonce").isJsonNull()) && !jsonObj.get("Nonce").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Nonce` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Nonce").toString()));
      }
      if ((jsonObj.get("R") != null && !jsonObj.get("R").isJsonNull()) && !jsonObj.get("R").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `R` to be a primitive type in the JSON string but got `%s`", jsonObj.get("R").toString()));
      }
      if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull()) && !jsonObj.get("S").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `S` to be a primitive type in the JSON string but got `%s`", jsonObj.get("S").toString()));
      }
      if ((jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) && !jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      if ((jsonObj.get("TransactionIndex") != null && !jsonObj.get("TransactionIndex").isJsonNull()) && !jsonObj.get("TransactionIndex").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionIndex` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionIndex").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull()) && !jsonObj.get("V").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `V` to be a primitive type in the JSON string but got `%s`", jsonObj.get("V").toString()));
      }
      if ((jsonObj.get("Value") != null && !jsonObj.get("Value").isJsonNull()) && !jsonObj.get("Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseTransaction>() {
           @Override
           public void write(JsonWriter out, ResponseTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseTransaction
   * @throws IOException if the JSON string is invalid with respect to ResponseTransaction
   */
  public static ResponseTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseTransaction.class);
  }

  /**
   * Convert an instance of ResponseTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

